function param = sleep(time,activity,epoch,...
    analysisStartTime,analysisEndTime,bedTime,getupTime,thresholdMode)
%SLEEPANALYSIS Execute Daysimeter Sleep Algorithm
%   Returns all sleep parameters as a struct
%   All input times must be in MATLAB datenum format
%   time and activity must be arrays of equal length
%   thresholdMode must either be 'auto' or a numeric value

%% Import sleep package
import sleep.*;

%% Initialize empty struct for output
param = struct('timeInBed',              {[]},...
               'sleepStart',             {[]},...
               'sleepEnd',               {[]},...
               'assumedSleepTime',       {[]},...
               'threshold',              {[]},...
               'actualSleepTime',        {[]},...
               'actualSleepPercent',     {[]},...
               'actualWakeTime',         {[]},...
               'actualWakePercent',      {[]},...
               'sleepEfficiency',        {[]},...
               'sleepLatency',           {[]},...
               'sleepBouts',             {[]},...
               'wakeBouts',              {[]},...
               'meanSleepBoutTime',      {[]},...
               'meanWakeBoutTime',       {[]},...
               'immobileTime',           {[]},...
               'immobilePercent',        {[]},...
               'mobileTime',             {[]},...
               'mobilePercent',          {[]},...
               'immobileBouts',          {[]},...
               'mobileBouts',            {[]},...
               'meanImmobileBoutTime',   {[]},...
               'meanMobileBoutTime',     {[]},...
               'immobile1MinBouts',      {[]},...
               'immobile1MinPercent',    {[]},...
               'totalActivityScore',     {[]},...
               'meanActivityScore',      {[]},...
               'meanScoreActivePeriods', {[]},...
               'moveAndFragIndex',       {[]});

%% Perform Sleep Analysis Algorithms
% Find the level of background noise
baselineActivity = findBaseline(activity);

% Trim the data to the analysis period
[time,activity] = trimData(time,activity,analysisStartTime,analysisEndTime);

% Score Immobility
immobility = scoreImmobility(activity,baselineActivity);

% Calculate Time in Bed
param.timeInBed = inBed(bedTime,getupTime);

% Find Sleep Start and Sleep End
try
    [sleepStart,sleepEnd,...
        param.sleepStart,param.sleepEnd] = ...
        sleepBounds(time,immobility,bedTime,getupTime,epoch.seconds);
catch err
    display(err.message);
    return
end

% Calculate Assumed Sleep Time
param.assumedSleepTime = assumedSleep(sleepStart,sleepEnd);

% Set the threshold for sleep scoring
if strcmpi(thresholdMode,'auto')
    param.threshold = autoThreshold(activity,immobility);
elseif isnumeric(thresholdMode)
    param.threshold = thresholdMode;
else
    error('Invalid threshold mode.');
end

% Convert Activity to Total Activity
totalActivity = a2ta(activity,epoch.seconds);

% Score sleep
sleep = scoreSleep(totalActivity,param.threshold);

% Calculate Actual Sleep Time
[param.actualSleepTime,param.actualSleepPercent,...
    param.actualWakeTime,param.actualWakePercent] = ...
    actualSleep(time,sleep,sleepStart,sleepEnd,...
    epoch.seconds,param.assumedSleepTime);

% Calculate Sleep Efficiency
param.sleepEfficiency = efficiency(param.actualSleepTime,bedTime,getupTime);

% Calculate Sleep Latency
param.sleepLatency = latency(bedTime,sleepStart,epoch.seconds);

% Calculate Sleep and Wake Bouts
[param.sleepBouts,param.wakeBouts,...
    param.meanSleepBoutTime,param.meanWakeBoutTime] = ...
    boutsSleepWake(time,sleep,sleepStart,sleepEnd,...
    param.actualSleepTime,param.actualWakeTime);

% Calculate Immobile and Mobile Time
[param.immobileTime,param.immobilePercent,...
    param.mobileTime,param.mobilePercent] = ...
    timeImmobileMobile(time,immobility,sleepStart,sleepEnd,...
    epoch.seconds,param.assumedSleepTime);

% Calculate Immobile and Mobile Bouts
[param.immobileBouts,param.mobileBouts,...
    param.meanImmobileBoutTime,param.meanMobileBoutTime,...
    param.immobile1MinBouts,param.immobile1MinPercent] = ...
    boutsImmobileMobile(time,immobility,sleepStart,sleepEnd,...
    param.immobileTime,param.mobileTime,epoch.seconds);

% Calculate the Total and Mean Scores
[param.totalActivityScore,...
    param.meanActivityScore,...
    param.meanScoreActivePeriods] = ...
    meanScore(time,activity,sleepStart,sleepEnd);

% Calculate Movement and Fragmentation Index
param.moveAndFragIndex = param.mobilePercent + param.immobile1MinPercent;

%% Round results to appropriate precision
% Round to epoch
epochMin = epoch.seconds/60; % Epoch in minutes
param.timeInBed = round(param.timeInBed*epochMin)/epochMin;
param.assumedSleepTime = round(param.assumedSleepTime*epochMin)/epochMin;
param.actualSleepTime = round(param.actualSleepTime*epochMin)/epochMin;
param.actualWakeTime = round(param.actualWakeTime*epochMin)/epochMin;
param.sleepLatency = round(param.sleepLatency*epochMin)/epochMin;
param.immobileTime = round(param.immobileTime*epochMin)/epochMin;
param.mobileTime = round(param.mobileTime*epochMin)/epochMin;
% Round to 4 decimal places
param.actualSleepPercent = round(param.actualSleepPercent*10000)/10000;
param.actualWakePercent = round(param.actualWakePercent*10000)/10000;
param.sleepEfficiency = round(param.sleepEfficiency*10000)/10000;
param.immobilePercent = round(param.immobilePercent*10000)/10000;
param.mobilePercent = round(param.mobilePercent*10000)/10000;
param.immobile1MinPercent = round(param.immobile1MinPercent*10000)/10000;
param.moveAndFragIndex = round(param.moveAndFragIndex*10000)/10000;

end

